//
//  QuestionList.swift
//  DevPrep
//
//  Created by Andy Couto on 11/26/22.
//

import Foundation

struct QuestionList
{
    static var groupedQuestions: Dictionary<String, [Question]>
    {
        return Dictionary(grouping: questions, by: { $0.type.rawValue })
    }
    
    static var sectionNames: [String]
    {
        return Array(groupedQuestions.keys)
    }
    
    static let questions = [
        // MARK: - behavioral
        Question(id: 1,
                 type: .behavioral,
                 ask: "Tell me about yourself.",
                 answer: "You’ll be asked to talk about yourself and how you got in to programming. Do your best to weave a narrative that reinforces, in a positive light, how you got here today and why you would be a great fit for the job."),
        Question(id: 2,
                 type: .behavioral,
                 ask: "Tell me about a time you made a mistake that made an impact in production. How did you resolve the problem?",
                 answer: "You can use this question to demonstrate your communication and critical thinking skills under pressure. You can also use it to showcase your integrity and ability to admit and correct your mistakes."),
        Question(id: 3,
                 type: .behavioral,
                 ask: "Describe an occasion when you had to manage your time to complete a task. How did you do it?",
                 answer: "This question can appear in interviews for a variety of roles. It’s your chance to highlight your time management skills. In your answer, be sure to discuss elements such as your organization's strategies and the tools you use to stay on task and track deadlines."),
        Question(id: 4,
                 type: .behavioral,
                 ask: "Tell me about a time you went beyond the call of duty. Why did you do this, and what happened?",
                 answer: "With this commonly asked question, you can describe a specific instance when you stepped up to help another coworker, your team, a supervisor or a client or customer. This example can allow you to demonstrate your dedication to your role and your team and organization’s success. Also, it showcases qualities such as integrity, selflessness and teamwork."),
        Question(id: 5,
                 type: .behavioral,
                 ask: "Describe a time when you had to motivate coworkers.",
                 answer: "This question is likely to come up in an interview for a leadership position. Use this question to demonstrate leadership skills related to motivation and your strategies to promote productivity and success on a team."),
        Question(id: 6,
                 type: .behavioral,
                 ask: "Describe a typical day at your current position.",
                 answer: "The interviewer might want to know what your day is like when working on a project. Be able to explain how you go about it, what you use (Xcode, Postman, Jira, etc.), and also be ready to talk about some libraries you use (AFNetworking, MapKit, GoogleAnalytics, etc.)."),
        Question(id: 7,
                 type: .behavioral,
                 ask: "What are your strengths?",
                 answer: "Have a few ideas for what your strengths are in mobile development. Are you really good at time management? learning new things?"),
        Question(id: 8,
                 type: .behavioral,
                 ask: "What is your greatest weakness?",
                 answer: "The key to answering this question in your job interview is to prepare by identifying weaknesses that still communicate strengths. This will show the interviewer you’re introspective enough to know your areas of opportunity. Give an example of how you have used this weakness to grow professionally."),
        Question(id: 9,
                 type: .behavioral,
                 ask: "What do you know about the role/company?",
                 answer: "Be prepared to research the role and the company before the interview. Having a good answer to this question shows you have a genuine interest in pursuing the position."),
        Question(id: 10,
                 type: .behavioral,
                 ask: "What resources would you give someone wanting to learn swift?",
                 answer: "Be prepared with a mixture of books, newsletters, websites, or youtube channels."),
        Question(id: 10,
                 type: .behavioral,
                 ask: "What are some common issues you see new developers in pull requests?",
                 answer: "Think about styling, memory issues, architecture problems, etc. that you commonly see with new devs."),
        
        // MARK: - dataPersistence
        
        Question(id: 20,
                 type: .dataPersistence,
                 ask: "Describe managed object context and its function.",
                 answer: "A managed object context (represented by an instance of NSManagedObjectContext) is a temporary ‘scratchpad’ in an application for a (presumably) related collection of objects. These objects collectively represent an internally consistent view of one or more persistent stores. A single-managed object instance exists in one and only one context, but multiple copies of an object can exist in different contexts. \n\nThe key functions of the managed object context include the following: \n1. Life-cycle management: Here, the context provides validation, inverse relationship handling, and undo/redo. \n2. Notifications: It refers to context posts’ notifications at various points that can be optionally monitored elsewhere in our application. \n3. Concurrency: Here, the Core Data uses thread (or serialized queue) confinement to protect managed objects and managed object contexts."),
        Question(id: 21,
                 type: .dataPersistence,
                 ask: "How does CloudKit differ from Core Data?",
                 answer: "Although the two have many conceptual similarities, CloudKit is specifically designed to work remotely. Another key difference is that CloudKit lets you store data without worrying about your structure ahead of time, whereas Core Data requires that you define your structure up front."),
        Question(id: 22,
                 type: .dataPersistence,
                 ask: "What class would you use to list files in a directory?",
                 answer: "FileManager. A file manager object lets you examine the contents of the file system and make changes to it."),
        Question(id: 23,
                 type: .dataPersistence,
                 ask: "What is UserDefaults good for? What is UserDefaults not good for?",
                 answer: "This should immediately have you thinking about speed, size, and security: UserDefaults is bad at large amounts of data because it slows your app load, it’s annoying for complex data types because of NSCoding, and a bad choice for information such as credit cards and passwords – recommend the keychain instead. If you’re using SwiftUI extensively you could mention @AppStorage here."),
        
        // MARK: - uiKit
        
        Question(id: 30,
                 type: .uiKit,
                 ask: "Differentiate between a frame and a bound?",
                 answer: "A UIView’s bounds are a rectangle with a size (width, height) and position (x,y) relative to its own coordinate system (0,0). A UIView’s frame is a rectangle with a scale (width, height) and position (x,y) relative to the superview it is located within."),
        Question(id: 31,
                 type: .uiKit,
                 ask: "What properties do you set when adding a shadow to a UIView?",
                 answer: "Shadow properties live within the layer property of a UIView. You can set layer.shadowColor, layer.shadowOpacity, layer.shadowOffset, layer.shadowRadius. \nOptionally you can also set the layer.shadowPath property so the OS doesn't need to calculate transparency dynamically. \nYou can also set layer.shouldRasterize to cache the rendered shadow and layer.rasterizationScale to cache the shadow at the same drawing scale as the main screen."),
        
        // MARK: - designPatterns

        Question(id: 40,
                 type: .designPatterns,
                 ask: "What is the difference between KVC and KVO?",
                 answer: "KVC (Key-Value Coding) is a method for accessing an object’s properties using strings at runtime rather than needing to know the property names statically at development time. Example: Interface Builder and how it links IBOutlets. \n\nKVO (Key-Value Observing) allows a controller or class to monitor changes in a property value. In KVO, an object may request to be informed of any adjustments to a particular property, and the observer is automatically notified if that property’s value changes."),
        Question(id: 41,
                 type: .designPatterns,
                 ask: "What is a Singleton? What are its disadvantages.",
                 answer: "When only one instance of a class is created in the application. Disadvantage examples: Due to coupling it can make code harder to test. Singletons can also make it harder to test because they can't easily start from a 'clean slate'. "),
        Question(id: 42,
                 type: .designPatterns,
                 ask: "What is the observer pattern?",
                 answer: "In the Observer pattern, one object notifies other objects of any state changes. \n\nCocoa implements the observer pattern in two ways: Notifications and Key-Value Observing (KVO)."),
        Question(id: 43,
                 type: .designPatterns,
                 ask: "Explain delegation.",
                 answer: "Delegation allows you to have one object act in place of another, for example your view controller might act as the data source for a table. \nDelegation usually starts two classes and a protocol. One class conforms to the protocol (the delegate) and the other class defines their delegate with the protocol."),
        Question(id: 44,
                 type: .designPatterns,
                 ask: "What is dependency injection?",
                 answer: "Dependency injection is injecting dependencies into an object instead of tasking the object with the responsibility of creating its dependencies. It is very useful when testing."),
        Question(id: 45,
                 type: .designPatterns,
                 ask: "What is a protocol?",
                 answer: "A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be adopted by a class, structure, or enumeration to provide an actual implementation of those requirements."),
        Question(id: 46,
                 type: .designPatterns,
                 ask: "What is NotificationCenter?",
                 answer: "A notification dispatch mechanism that enables the broadcast of information to registered observers. \nIt helps for observation and broadcasting singles from one class to multiple classes. \nPost singles from one class to multiple classes. \nReceiving singles from multiple classes."),
        
        // MARK: - performance

        Question(id: 50,
                 type: .performance,
                 ask: "What is the difference between synchronous & asynchronous tasks?",
                 answer: "Synchronous means tasks are completed in order one at a time. Asynchronous means tasks can be completed in any order and multiple tasks can be completed at the same time."),
        Question(id: 51,
                 type: .performance,
                 ask: "What is Concurrency?",
                 answer: "Concurrency is a means running several tasks at the same time. On iOS devices, concurrency is commonly used to allow you to run tasks such as downloading or processing data in the background while keeping your user interface lag-free."),
        Question(id: 52,
                 type: .performance,
                 ask: "Name a few ways you can achieve concurrency on iOS.",
                 answer: "Grand Central Dispatch. OperationQueue. Threads"),
        Question(id: 53,
                 type: .performance,
                 ask: "What is a deadlock?",
                 answer: "A deadlock is a situation that occurs when at least two threads are locked on a different resource, and both are waiting for the other resource to finish its job. And no one is able to unlock the resource it is guarding."),
        Question(id: 54,
                 type: .performance,
                 ask: "How would you identify and resolve a retain cycle?",
                 answer: "Instruments or the Memory Graph Debugger can help identify a retain cycle. Once a retain cycle is found, we can decide which side of the cycle should be made weak rather than strong in order to resolve it"),
        
        // MARK: - Swift

        Question(id: 60,
                 type: .swift,
                 ask: "What is a Lazy property?",
                 answer: "A lazy stored property is one that does not determine its initial value until it is used for the first time. The lazy modifier is written before the declaration of a lazy stored property."),
        Question(id: 61,
                 type: .swift,
                 ask: "What is ARC?",
                 answer: "Automatic Reference Counting."),
        Question(id: 62,
                 type: .swift,
                 ask: "How can we influence the compilation process with Swift?",
                 answer: "Compiler directives, particularly the #if command, which enables us to conditionally include or exclude certain code blocks when our program is being compiled."),
        Question(id: 63,
                 type: .swift,
                 ask: "Name some properties of an NSError?",
                 answer: "Code: The error code. Domain: A string containing the error domain. UserInfo: The user info dictionary."),
        Question(id: 64,
                 type: .swift,
                 ask: "Explain the difference between strong, weak, and unowned.",
                 answer: "Strong: Strong references in Swift increment the reference count by 1. By default, references in Swift are strong meaning using var without a modifier creates a strong reference. \n\nWeak: A weak reference does not increment or decrement the reference count of an object. Since weak references do not increment the reference count of an object, a weak reference can be nil. This is because the object could be deallocated while the weak reference is pointing to it. \n\nUnowned: Like a weak reference, an unowned reference does not increment or decrement the reference count of an object. However, unlike a weak reference, the program guarantees to the Swift compiler that an unowned reference will not be nil when it is accessed. Accessing an unowned reference when the instance the reference points to is nil will cause a fatal program error."),
        Question(id: 65,
                 type: .swift,
                 ask: "What is the keyword defer used for?",
                 answer: "defer is a keyword which provides a block of code that will be executed in the case when execution is leaving the current scope."),
        Question(id: 66,
                 type: .swift,
                 ask: "What is the difference between a class and a struct?",
                 answer: "Your answer ought to include a discussion of value types (like structs) and reference types (like classes), but also the fact that classes allow inheritance. Classes also have deinit() methods and structs do not"),
        Question(id: 67,
                 type: .swift,
                 ask: "What is a tuple?",
                 answer: "A Tuple is a constant or variable that can accommodate a group of values that can be of different data types and compounded for a single value"),
        Question(id: 68,
                 type: .swift,
                 ask: "What is the Codable protocol used for?",
                 answer: "Codable is the combined protocol of Swift's Decodable and Encodable protocols. This protocol was introduced in Swift 4 to let us quickly and safely convert custom Swift types to and from JSON, XML, and similar.\n\nCodable will work without customization as long as the struct is only using stored properties that themselves are encodable/decodable"),
        Question(id: 600,
                 type: .swift,
                 ask: "What is the difference between an array and a set",
                 answer: "sets can’t contain duplicates and are unordered, so lookup is significantly faster."),
        Question(id: 601,
                 type: .swift,
                 ask: "What is the difference between the Float, Double, and CGFloat data types?",
                 answer: "Float is always 32-bit, Double is always 64-bit, and CGFloat is either 32-bit or 64-bit depending on the device it runs on"),
        Question(id: 602,
                 type: .swift,
                 ask: "What are key decoding strategies used for when using Codable?",
                 answer: "Key decoding strategies let us handle difference between JSON keys and property names in our Decodable struct. For example: if the JSON key is 'ios_dev' and our struct's property name is 'iosDev' then we would use the 'convertFromSnakeCase' key decoding strategy"),
        Question(id: 603,
                 type: .swift,
                 ask: "When using arrays, what’s the difference between map() and compactMap()?",
                 answer: "Map() transforms a sequence using a function we specify, whereas compactMap() does that same step but then unwraps its optionals and discards any nil values"),
        Question(id: 604,
                 type: .swift,
                 ask: "What is a UUID, and when might you use it?",
                 answer: "A universally unique value to identify types, interfaces, and other items. One place it can be used is in databases."),
        Question(id: 605,
                 type: .swift,
                 ask: "What's the difference between a value type and a reference type?",
                 answer: "A value type instance keeps a unique copy of its data, for example, a struct, enum, or a tuple. A reference type, shares a single copy of its data, and the type is a class, function, or closure"),
        Question(id: 607,
                 type: .swift,
                 ask: "When would you use Swift’s Result type?",
                 answer: "Result: an enum encapsulating success and failure, both with associated values so you can attach extra information. A good place to use it is in asynchronous functions where the outcome is either success or failure. You can use it for something like URLSession where it can hand back an error or a value even when only one should exist at a time."),
        Question(id: 608,
                 type: .swift,
                 ask: "What’s a SortComparator?",
                 answer: "Objects that conform to SortComparator provide a comparison algorithm and storage for the sort order to use when comparing."),
        Question(id: 609,
                 type: .swift,
                 ask: "What are raw strings?",
                 answer: "Raw strings in Swift 5 give us the ability to write more natural strings, particularly when using backslashes and/or quote marks. \n\nIt would look something like this\n\nlet message = #\"String interpolation looks like this: \\(age).\"#"),
        Question(id: 610,
                 type: .swift,
                 ask: "Explain the difference between using a guard vs an if let.",
                 answer: "if let and guard let serve similar, but distinct purposes.\nThe 'else' case of guard must exit the current scope. Generally that means it must call return or abort the program. guard is used to provide early return without requiring nesting of the rest of the function.\n\nif let nests its scope, and does not require anything special of it. It can return or not.\n\nIn general, if the if-let block was going to be the rest of the function, or its else clause would have a return or abort in it, then you should be using guard instead. This often means (at least in my experience), when in doubt, guard is usually the better answer. But there are plenty of situations where if let still is appropriate."),
        Question(id: 611,
                 type: .swift,
                 ask: "What does the #if swift syntax do?",
                 answer: "The syntax supports compile-time version checking, meaning that you can mix two different Swift versions in one file without errors because only one will be used at a time."),
        Question(id: 612,
                 type: .swift,
                 ask: "What does the assert() function do?",
                 answer: "This evaluates some code and causes your app to crash if the result is false. This is actually helpful because the check only happens in debug mode – it lets you make sure your code does what you think it does."),
        Question(id: 613,
                 type: .swift,
                 ask: "What does the final keyword do, and why would you want to use it?",
                 answer: "When you declare a class as being final, no other class can inherit from it. Using final increases performance by reducing dynamic dispatch."),
        Question(id: 614,
                 type: .swift,
                 ask: "What is the ?? syntax called and what does it do?",
                 answer: "The nil coalescing operator lets you provide a default value to use if an optional value is empty"),
        Question(id: 615,
                 type: .swift,
                 ask: "What is the difference between try, try?, and try! in Swift?",
                 answer: "The try keyword is used to indicate that a method can throw an error. To catch and handle an error, the throwing method call needs to be wrapped in a do-catch statement. \n\nIf we use the try? keyword and an error is thrown, the error is handled by turning it into an optional value. \n\nWhen using try! if an error does get thrown, your application crashes as the result of a runtime error."),
        Question(id: 616,
                 type: .swift,
                 ask: "Can you give useful examples of enum associated values?",
                 answer: "Enum associated values let us attach one or more extra pieces of data to enum cases. An example might be enum Distance with km and miles as cases and a string as an associated value to capture the distance value."),
        Question(id: 617,
                 type: .swift,
                 ask: "How would you explain closures to a new Swift developer?",
                 answer: "Closures are self-contained blocks of functionality that can be passed around and used in your code."),
        Question(id: 618,
                 type: .swift,
                 ask: "What is the difference between an escaping closure and a non-escaping closure?",
                 answer: "If you pass a closure as a function parameter and that closure might be called after the function has returned (e.g. after a delay), it must be marked as escaping. Follow-up question might be what does swift use as a default? non-escaping."),
        Question(id: 619,
                 type: .swift,
                 ask: "What is a keypath?",
                 answer: "Keypaths in Swift are a way of storing a reference to a property, as opposed to referencing property's value itself."),
        
        Question(id: 70,
                 type: .architecture,
                 ask: "Explain each part of MVC.",
                 answer: "Models: responsible for the domain data or a data access layer which manipulates the data, think of ‘Person’ or ‘PersonDataProvider’ classes. \n\nViews — responsible for the presentation layer (GUI), for iOS environment think of everything starting with ‘UI’ prefix. \n\nController/Presenter/ViewModel — the glue or the mediator between the Model and the View, in general responsible for altering the Model by reacting to the user’s actions performed on the View and updating the View with changes from the Model."),
        Question(id: 71,
                 type: .architecture,
                 ask: "Explain each part of MVVM.",
                 answer: "Model – Acts the same as in MVC design patterns – it is used by ViewModel and updates whenever ViewModel sends a new update.\n\nViewController – It is responsible for setting up UI views. There is no direct interaction between the ViewController & Model and it no longer needs to worry about business logic. It should go through ViewModel and request for what it requires in a ready-to-display format.\n\nViewModel – It is responsible for all business logic. If the ViewController has a label, it triggers entire calls and sends & receives data. It is completely independent of the ViewController. It receives information from the ViewController, processes all this information & sends the results back to ViewController."),
        
        Question(id: 80,
                 type: .networking,
                 ask: "Walk me through making a network request.",
                 answer: "Without using a third party framework a simple network request could be made using URLSession, URLRequest, and Decoder. \n\nThe URLSession class and related classes provide an API for downloading data from and uploading data to endpoints indicated by URLs. \nURLSession is class that coordinate things related to data transfer. This class will help you perform a fetch request from a given URL/Link. \n\nURLRequest encapsulates two essential properties of a load request: the URL to load and the policies used to load it. \n\nA Decoder is a a class/function to decode raw data given by the internet when you retrieve the data after you perform a request. For example, swift provides a class called JSONDecoder to decode the JSON data into something that swift can read. \n\nGoing further you would start by defining a URL then a URLRequest. Using the request you can call URLSession's dataTask API which creates a task that retrieves the contents of a URL based on the specified URL request object, and calls a handler upon completion.\nThat completion returns data that can then be decoded and used."),
        
        Question(id: 880,
                 type: .testing,
                 ask: "What is the difference between unit & integration tests?",
                 answer: "Unit testing means testing individual modules of an application in isolation (without any interaction with dependencies) to confirm that the code is doing things right. \nIntegration testing means checking if different modules are working fine when combined together as a group."),
        
        Question(id: 90,
                 type: .appleFrameworks,
                 ask: "How do you manage dependencies?",
                 answer: "A good answer is some kind of package manager like cocoapods, Carthage, or Swift Package Manager. Be prepared for some possible follow up questions here like: the differences between the package managers, or what some common commands do."),
        
        Question(id: 980,
                 type: .tooling,
                 ask: "Name a few Git commands and explain their usage.",
                 answer: "git checkout [branch name] : used to switch from one branch to another \n\ngit checkout -b [branch name] : creates a new branch and also switches to it \n\ngit log : list the version history for the current branch \n\ngit status : displays the state of the working directory and the staging area"),
        
        // MARK: - accessibility
        Question(id: 100,
                 type: .accessibility,
                 ask: "Describe your experience making apps more accessible.",
                 answer: "Have you supported dynamic type for fonts? Added text/icons to describe something communicated with color? Added accessibility labels? Increased the tappable area of a button?"),
        Question(id: 101,
                 type: .accessibility,
                 ask: "What is Dynamic Type?",
                 answer: "The Dynamic Type feature allows users to choose the size of textual content displayed on the screen."),
        Question(id: 102,
                 type: .accessibility,
                 ask: "How do you turn on voice over?",
                 answer: "Go to Settings  > Accessibility > VoiceOver.")
    ]
}
